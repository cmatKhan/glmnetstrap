% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select_stable_predictors_by_bootstrap.R
\name{select_stable_predictors_by_bootstrap}
\alias{select_stable_predictors_by_bootstrap}
\title{Iterative Bootstrap CV with Confidence Interval-Based Variable Selection}
\usage{
select_stable_predictors_by_bootstrap(
  x,
  y,
  fold_classes,
  ci_start = 50,
  ci_final = 98,
  ci_step = 2,
  n_bootstraps = 100,
  seed = NULL,
  ...
)
}
\arguments{
\item{x}{A numeric matrix of predictors (samples Ã— features).}

\item{y}{A numeric response vector of length equal to \code{nrow(x)}.}

\item{fold_classes}{A factor or vector used to create stratified folds.}

\item{ci_start}{Starting confidence interval for iterative selection
(default: 50).}

\item{ci_final}{Final confidence interval used in final modeling step
(default: 98).}

\item{ci_step}{Step size for increasing CI between iterations (default: 2).}

\item{n_bootstraps}{Number of bootstrap replicates to run per CI level.}

\item{seed}{Random seed for reproducibility. Used for bootstrap sampling
and fold generation.}

\item{...}{
  Arguments passed on to \code{\link[=bootstrap_cv_glmnet]{bootstrap_cv_glmnet}}
  \describe{
    \item{\code{}}{}
  }}

\item{active_predictors}{Optional logical or numeric index indicating
which predictors to include. Default is all.}
}
\value{
A list containing:
\describe{
\item{iterative_final_ci}{The final confidence interval at which
stabilization occurred.}
\item{stabilized_variables}{Character vector of variables selected
after stabilization.}
\item{fits}{A list of fitted \code{cv.glmnet} objects from the final
bootstrap pass.}
}
}
\description{
This function performs iterative bootstrapped Lasso modeling using
\code{cv.glmnet()} across increasing confidence intervals (CIs),
dropping variables whose confidence intervals include zero. Iteration
stops when the number of selected variables stabilizes between CI steps.
A final bootstrap run is performed at the stabilized variable set.
}
\examples{
\dontrun{
set.seed(123)
x <- matrix(rnorm(100 * 10), ncol = 10)
y <- rnorm(100)
folds <- sample(rep(1:4, length.out = 100))
result <- select_stable_predictors_by_bootstrap(x, y, folds, alpha = 1)
result$stabilized_variables
}

}
